#!/command/with-contenv bash

configure_certificates() {

    if [ ! -f "${TLS_SERVER_PATH}"/"${TLS_SERVER_CERT}" ] || [ ! -f "${TLS_SERVER_PATH}"/"${TLS_SERVER_KEY}" ] ; then
        print_debug "TLS: Creating Server Certificates"
        mkdir -p "${TLS_SERVER_PATH}"
        chown -f -R "${UNBOUND_USER}" "${TLS_SERVER_PATH}"
        cat > "${TLS_SERVER_PATH}"/server.cnf <<EOF
[req]
default_bits=3072
default_md=sha256
prompt=no
distinguished_name=req_distinguished_name
x509_extensions=v3_ca
[req_distinguished_name]
commonName=unbound-server
[v3_ca]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints=critical,CA:TRUE,pathlen:0
subjectAltName=DNS:unbound-server
EOF
        silent sudo -u "${UNBOUND_USER}" openssl genrsa -out "${TLS_SERVER_PATH}"/"${TLS_SERVER_KEY}" 3072
        silent sudo -u "${UNBOUND_USER}" openssl req -new -x509 -key "${TLS_SERVER_PATH}"/"${TLS_SERVER_KEY}" -config "${TLS_SERVER_PATH}"/server.cnf -days 7200 -out "${TLS_SERVER_PATH}"/"${TLS_SERVER_CERT}"
    fi

    if [ ! -f "${TLS_CONTROL_PATH}"/"${TLS_CONTROL_CERT}" ] || [ ! -f "${TLS_CONTROL_PATH}"/"${TLS_CONTROL_KEY}" ] ; then
        print_debug "TLS: Creating Control Certificates"
        mkdir -p "${TLS_CONTROL_PATH}"
        chown -f -R "${UNBOUND_USER}" "${TLS_CONTROL_PATH}"
        cat > "${TLS_CONTROL_PATH}"/client.cnf <<EOF
[req]
default_bits=3072
default_md=sha256
prompt=no
distinguished_name=req_distinguished_name
req_extensions=v3_req
[req_distinguished_name]
commonName=unbound-control
[v3_req]
basicConstraints=critical,CA:FALSE
subjectAltName=DNS:unbound-control
EOF

        silent sudo -u "${UNBOUND_USER}" openssl genrsa -out "${TLS_CONTROL_PATH}"/"${TLS_CONTROL_KEY}" 3072
        silent sudo -u "${UNBOUND_USER}" openssl x509 -addtrust serverAuth -in "${TLS_SERVER_PATH}"/"${TLS_SERVER_CERT}" -out "${TLS_SERVER_PATH}"/"${TLS_SERVER_CERT%.*}"_trust.pem
        sudo -u "${UNBOUND_USER}" openssl req -new -config "${TLS_CONTROL_PATH}"/client.cnf -key "${TLS_CONTROL_PATH}"/"${TLS_CONTROL_KEY}" | \
        silent sudo -u "${UNBOUND_USER}" openssl x509 -req -days 7200 -CA "${TLS_SERVER_PATH}"/"${TLS_SERVER_CERT%.*}"_trust.pem -CAkey "${TLS_SERVER_PATH}"/"${TLS_SERVER_KEY}" -CAcreateserial -sha256 -extfile  "${TLS_CONTROL_PATH}"/client.cnf -extensions v3_req -out "${TLS_CONTROL_PATH}"/"${TLS_CONTROL_CERT}"
        chmod -f o-rw "${TLS_CONTROL_PATH}"/{"${TLS_CONTROL_CERT}","${TLS_CONTROL_KEY}"}
        chmod -f o-rw "${TLS_SERVER_PATH}"/{"${TLS_SERVER_CERT}","${TLS_SERVER_KEY}"}
        rm -rf "${TLS_SERVER_PATH}"/server.cnf "${TLS_CONTROL_PATH}"/client.cnf "${TLS_SERVER_PATH}"/*_trust.pem "${TLS_CONTROL_PATH}"/*_trust.pem "${TLS_SERVER_PATH}"/*.srl
    fi
}

create_configuration() {
	if [ "${SETUP_TYPE,,}" = "auto" ]; then
        print_notice "Configuring Unbound"
        mkdir -p "${CONFIG_PATH}"/conf.d

        if [ ! -f "${ROOT_HINTS_FILE}" ] ; then
            cp -aR /assets/unbound/named.cache "${ROOT_HINTS_FILE}"
        fi
        if [[ $(find "${ROOT_HINTS_FILE}" -mtime +30 -print) ]] ;  then
            print_notice "Root Hints are older than 30 days - Refreshing"
            curl -sSL "${ROOT_HINTS_URI}" | sudo -u "${UNBOUND_USER}" tee "${ROOT_HINTS_FILE}"
        fi

        chown -R "${UNBOUND_USER}" "${CONFIG_PATH}"

        truefalse_yesno DENY_ANY
        truefalse_yesno ENABLE_IPV4
        truefalse_yesno ENABLE_IPV6
        truefalse_yesno ENABLE_REMOTE_CONTROL
        truefalse_yesno ENABLE_TCP
        truefalse_yesno ENABLE_UDP
        truefalse_yesno HARDEN_DNSSEC_STRIPPED
        truefalse_yesno HARDEN_GLUE
        truefalse_yesno HARDEN_LARGE_QUERIES
        truefalse_yesno HARDEN_SHORT_BUFFER_SIZE
        truefalse_yesno MINIMAL_RESPONSES
        truefalse_yesno NO_QUERY_LOCALHOST
        truefalse_yesno LOG_QUERIES
        truefalse_yesno LOG_REPLIES
        truefalse_yesno LOG_SERVFAIL
        truefalse_yesno LOG_TIME_ASCII
        truefalse_yesno PREFETCH
        truefalse_yesno PREFETCH_KEY
        truefalse_yesno QNAME_MINIMIZATION
        truefalse_yesno RRSET_ROUNDROBIN
        truefalse_yesno SO_REUSE_PORT
        truefalse_yesno STATISTICS_CUMULATIVE
        truefalse_yesno STATISTICS_EXTENDED

		sudo -u "${UNBOUND_USER}" cat << EOF > "${CONFIG_PATH}""${CONFIG_FILE}"
## Custom Generated Unbound Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server:
    access-control: 0.0.0.0/0 allow
    cache-max-negative-ttl: ${CACHE_TTL_MAX_NEGATIVE}
    cache-max-ttl: ${CACHE_TTL_MAX}
    cache-min-ttl: ${CACHE_TTL_MIN}
    deny-any: ${DENY_ANY}
    do-ip4: ${ENABLE_IPV4}
    do-ip6: ${ENABLE_IPV6}
    do-not-query-localhost: ${NO_QUERY_LOCALHOST}
    do-tcp: ${ENABLE_TCP}
    do-udp: ${ENABLE_UDP}
    edns-buffer-size: ${CACHE_SIZE_EDNS}
    extended-statistics: ${STATISTICS_EXTENDED}
    harden-dnssec-stripped: ${HARDEN_DNSSEC_STRIPPED}
    harden-glue: ${HARDEN_GLUE}
    harden-large-queries: ${HARDEN_LARGE_QUERIES}
    harden-short-bufsize: ${HARDEN_SHORT_BUFFER_SIZE}
    interface: ${LISTEN_IP}
    logfile: "${logfile}"
    log-queries: ${LOG_QUERIES}
    log-replies: ${LOG_REPLIES}
    log-servfail: ${LOG_SERVFAIL}
    log-time-ascii: ${LOG_TIME_ASCII}
    minimal-responses: ${MINIMAL_RESPONSES}
    msg-buffer-size: ${BUFFER_SIZE_MSG}
    msg-cache-size: ${CACHE_SIZE_MSG}
    msg-cache-slabs: ${CACHE_SLABS_MSG}
    num-queries-per-thread: ${THREADS_QUERIES_PER}
    outgoing-port-permit: "${ACCESS_CONTROL_OUTGOING_PORT_PERMIT}"
    pidfile: "/var/run/unbound.pid"
    port: ${LISTEN_PORT}
    prefetch: ${PREFETCH}
    prefetch-key: ${PREFETCH_KEY}
    qname-minimisation: ${QNAME_MINIMIZATION}
    root-hints: ${ROOT_HINTS_FILE}
    so-reuseport: ${SO_REUSE_PORT}
    statistics-cumulative: ${STATISTICS_CUMULATIVE}
    statistics-interval: ${STATISTICS_INTERVAL}
    target-fetch-policy: "${TARGET_FETCH_POLICY}"
    username: ${UNBOUND_USER}
    verbosity: ${LOG_LEVEL}

    include: ${CONFIG_PATH}conf.d/*.conf

remote-control:
    control-enable: ${ENABLE_REMOTE_CONTROL}
    control-interface: ${REMOTE_CONTROL_LISTEN_IP}
    control-port: ${REMOTE_CONTROL_LISTEN_PORT}
    server-key-file: "${TLS_SERVER_PATH}/${TLS_SERVER_KEY}"
    server-cert-file: "${TLS_SERVER_PATH}/${TLS_SERVER_CERT}"
    control-key-file: "${TLS_CONTROL_PATH}/${TLS_CONTROL_KEY}"
    control-cert-file: "${TLS_CONTROL_PATH}/${TLS_CONTROL_CERT}"

EOF
	fi
}

configure_logging() {
    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        print_debug "Configuring Logging"
        if [ "${LOG_TYPE,,}" = "file" ] ; then
            mkdir -p "${LOG_PATH}"
            touch "${LOG_PATH}"/"${LOG_FILE}"
            chown -R "${UNBOUND_USER}": "${LOG_PATH}"
            create_logrotate unbound "${LOG_PATH}"/"${LOG_FILE}" unbound unbound unbound
            logfile="${LOG_PATH}/${LOG_FILE}"
        else
            logfile=""
        fi

        ### Translate Logging
        case "${LOG_LEVEL,,}" in
            detailed | 2 )
                LOG_LEVEL=2
            ;;
            query | 3 )
                LOG_LEVEL=3
            ;;
            err* | 0 )
                LOG_LEVEL=0
            ;;
            algorithm | 4 )
                LOG_LEVEL=4
            ;;
            client | 5 )
                LOG_LEVEL=5
            ;;
        esac
    fi
}

configure_monitoring() {
        cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit-unbound.conf
# Zabbix Unbound Configuration - Automatically Generated
# Find Companion Zabbix Server Templates at https://github.com/tiredofit/docker-unbound
# Autoregister=unbound

UserParameter=unbound.get_statistics,echo \$(date) ; sudo unbound-control -c ${CONFIG_PATH}/${CONFIG_FILE} stats_noreset | sort
UserParameter=unbound.version,unbound -V | head -n1 | awk '{print \$2}'
EOF
}
